export default class VisibilityObserver{constructor(e={},t,r){this.observer=new IntersectionObserver(this.handleIntersect.bind(this),{root:e.root||null,rootMargin:e.rootMargin||"0px",threshold:e.threshold||.1}),this.observedElements=new WeakMap,this.debounceTimer=null,this.uniqueSelectors=t||{},this.TvrEventManager=r,this.initMutationObserver()}observeElementForInView(e,t){this.observedElements.has(e)||(this.observedElements.set(e,t),this.observer.observe(e))}unobserveElement(e){this.observedElements.has(e)&&(this.observedElements.delete(e),this.observer.unobserve(e)),this.TvrEventManager.attachedListeners.has(e)&&this.TvrEventManager.attachedListeners.delete(e)}handleIntersect(e){e.forEach((e=>{const t=this.observedElements.get(e.target);t&&"function"==typeof t&&this.viewHandler(e.isIntersecting,e.target)}))}initMutationObserver(){this.mutationObserver=new MutationObserver((e=>{e.forEach((e=>{e.addedNodes.forEach((e=>{1===e.nodeType&&this.observeNewElement(e)}))}))})),this.mutationObserver.observe(document.body,{childList:!0,subtree:!0})}observeNewElement(e){Object.keys(this.uniqueSelectors).forEach((t=>{const r=Array.from(this.uniqueSelectors[t]);if(!r.length)return;const s="inview"===t;this.isElementMatchSelector(e,r)&&this.TvrEventManager.attachUniqueLister(e,t,(r=>this.TvrEventManager.respondToEvent(t,e,r,comparison)),s),e.querySelectorAll(this.getUniqueSelectorString(t)).forEach((e=>{this.isElementMatchSelector(e,r)&&this.TvrEventManager.attachUniqueLister(e,t,(r=>this.TvrEventManager.respondToEvent(t,e,r,comparison)),s)}))}))}isElementMatchSelector(e,t){return t.some((t=>e.matches(t)))}getUniqueSelectorString(e){return Array.from(this.uniqueSelectors[e]).join(", ")}viewHandler(e,t){e&&this.TvrEventManager.respondToEvent("inview",t,{target:t})}disconnect(){this.observer.disconnect(),this.mutationObserver.disconnect()}}